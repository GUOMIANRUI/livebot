// Code generated by MockGen. DO NOT EDIT.
// Source: gochat.trpc.go

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockGoChatServiceService is a mock of GoChatServiceService interface.
type MockGoChatServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockGoChatServiceServiceMockRecorder
}

// MockGoChatServiceServiceMockRecorder is the mock recorder for MockGoChatServiceService.
type MockGoChatServiceServiceMockRecorder struct {
	mock *MockGoChatServiceService
}

// NewMockGoChatServiceService creates a new mock instance.
func NewMockGoChatServiceService(ctrl *gomock.Controller) *MockGoChatServiceService {
	mock := &MockGoChatServiceService{ctrl: ctrl}
	mock.recorder = &MockGoChatServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoChatServiceService) EXPECT() *MockGoChatServiceServiceMockRecorder {
	return m.recorder
}

// GoChat mocks base method.
func (m *MockGoChatServiceService) GoChat(ctx context.Context, req *GoChatRequest) (*GoChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoChat", ctx, req)
	ret0, _ := ret[0].(*GoChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoChat indicates an expected call of GoChat.
func (mr *MockGoChatServiceServiceMockRecorder) GoChat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoChat", reflect.TypeOf((*MockGoChatServiceService)(nil).GoChat), ctx, req)
}

// GoChatAudio mocks base method.
func (m *MockGoChatServiceService) GoChatAudio(ctx context.Context, req *GoChataudioRequest) (*GoChataudioResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoChatAudio", ctx, req)
	ret0, _ := ret[0].(*GoChataudioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoChatAudio indicates an expected call of GoChatAudio.
func (mr *MockGoChatServiceServiceMockRecorder) GoChatAudio(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoChatAudio", reflect.TypeOf((*MockGoChatServiceService)(nil).GoChatAudio), ctx, req)
}

// MockGoChatServiceClientProxy is a mock of GoChatServiceClientProxy interface.
type MockGoChatServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGoChatServiceClientProxyMockRecorder
}

// MockGoChatServiceClientProxyMockRecorder is the mock recorder for MockGoChatServiceClientProxy.
type MockGoChatServiceClientProxyMockRecorder struct {
	mock *MockGoChatServiceClientProxy
}

// NewMockGoChatServiceClientProxy creates a new mock instance.
func NewMockGoChatServiceClientProxy(ctrl *gomock.Controller) *MockGoChatServiceClientProxy {
	mock := &MockGoChatServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockGoChatServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoChatServiceClientProxy) EXPECT() *MockGoChatServiceClientProxyMockRecorder {
	return m.recorder
}

// GoChat mocks base method.
func (m *MockGoChatServiceClientProxy) GoChat(ctx context.Context, req *GoChatRequest, opts ...client.Option) (*GoChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GoChat", varargs...)
	ret0, _ := ret[0].(*GoChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoChat indicates an expected call of GoChat.
func (mr *MockGoChatServiceClientProxyMockRecorder) GoChat(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoChat", reflect.TypeOf((*MockGoChatServiceClientProxy)(nil).GoChat), varargs...)
}

// GoChatAudio mocks base method.
func (m *MockGoChatServiceClientProxy) GoChatAudio(ctx context.Context, req *GoChataudioRequest, opts ...client.Option) (*GoChataudioResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GoChatAudio", varargs...)
	ret0, _ := ret[0].(*GoChataudioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoChatAudio indicates an expected call of GoChatAudio.
func (mr *MockGoChatServiceClientProxyMockRecorder) GoChatAudio(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoChatAudio", reflect.TypeOf((*MockGoChatServiceClientProxy)(nil).GoChatAudio), varargs...)
}
