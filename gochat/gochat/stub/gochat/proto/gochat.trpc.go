// Code generated by trpc-go/trpc-cmdline v1.0.5. DO NOT EDIT.
// source: gochat.proto

package proto

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// GoChatServiceService defines service.
type GoChatServiceService interface {
	// GoChat GoChat says hello.
	GoChat(ctx context.Context, req *GoChatRequest) (*GoChatResponse, error)

	GoChatAudio(ctx context.Context, req *GoChataudioRequest) (*GoChataudioResponse, error)
}

func GoChatServiceService_GoChat_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GoChatRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GoChatServiceService).GoChat(ctx, reqbody.(*GoChatRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GoChatServiceService_GoChatAudio_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GoChataudioRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GoChatServiceService).GoChatAudio(ctx, reqbody.(*GoChataudioRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// GoChatServiceServer_ServiceDesc descriptor for server.RegisterService.
var GoChatServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "gochat.GoChatService",
	HandlerType: ((*GoChatServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/gochat.GoChatService/GoChat",
			Func: GoChatServiceService_GoChat_Handler,
		},
		{
			Name: "/gochat.GoChatService/GoChatAudio",
			Func: GoChatServiceService_GoChatAudio_Handler,
		},
	},
}

// RegisterGoChatServiceService registers service.
func RegisterGoChatServiceService(s server.Service, svr GoChatServiceService) {
	if err := s.Register(&GoChatServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("GoChatService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedGoChatService struct{}

// GoChat GoChat says hello.
func (s *UnimplementedGoChatService) GoChat(ctx context.Context, req *GoChatRequest) (*GoChatResponse, error) {
	return nil, errors.New("rpc GoChat of service GoChatService is not implemented")
}
func (s *UnimplementedGoChatService) GoChatAudio(ctx context.Context, req *GoChataudioRequest) (*GoChataudioResponse, error) {
	return nil, errors.New("rpc GoChatAudio of service GoChatService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// GoChatServiceClientProxy defines service client proxy
type GoChatServiceClientProxy interface {
	// GoChat GoChat says hello.
	GoChat(ctx context.Context, req *GoChatRequest, opts ...client.Option) (rsp *GoChatResponse, err error)

	GoChatAudio(ctx context.Context, req *GoChataudioRequest, opts ...client.Option) (rsp *GoChataudioResponse, err error)
}

type GoChatServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewGoChatServiceClientProxy = func(opts ...client.Option) GoChatServiceClientProxy {
	return &GoChatServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *GoChatServiceClientProxyImpl) GoChat(ctx context.Context, req *GoChatRequest, opts ...client.Option) (*GoChatResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/gochat.GoChatService/GoChat")
	msg.WithCalleeServiceName(GoChatServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GoChatService")
	msg.WithCalleeMethod("GoChat")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GoChatResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GoChatServiceClientProxyImpl) GoChatAudio(ctx context.Context, req *GoChataudioRequest, opts ...client.Option) (*GoChataudioResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/gochat.GoChatService/GoChatAudio")
	msg.WithCalleeServiceName(GoChatServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GoChatService")
	msg.WithCalleeMethod("GoChatAudio")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GoChataudioResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
